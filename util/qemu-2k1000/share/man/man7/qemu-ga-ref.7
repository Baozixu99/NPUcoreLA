.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "QEMU-GA-REF.7 7"
.TH QEMU-GA-REF.7 7 "2024-04-01" " " " "
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
qemu\-ga\-ref \- QEMU Guest Agent Protocol Reference
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
General note concerning the use of guest agent interfaces:
.PP
\&\*(L"unsupported\*(R" is a higher-level error than the errors that individual
commands might document. The caller should always be prepared to receive
\&\s-1QERR_UNSUPPORTED,\s0 even if the given command doesn't specify it, or doesn't
document any failure mode at all.
.PP
\&\fBguest-sync-delimited\fR  (Command)
Echo back a unique integer value, and prepend to response a
leading sentinel byte (0xFF) the client can check scan for.
.PP
This is used by clients talking to the guest agent over the
wire to ensure the stream is in sync and doesn't contain stale
data from previous client. It must be issued upon initial
connection, and after any client-side timeouts (including
timeouts on receiving a response to this command).
.PP
After issuing this request, all guest agent responses should be
ignored until the response containing the unique integer value
the client passed in is returned. Receival of the 0xFF sentinel
byte must be handled as an indication that the client's
lexer/tokenizer/parser state should be flushed/reset in
preparation for reliably receiving the subsequent response. As
an optimization, clients may opt to ignore all data until a
sentinel value is receiving to avoid unnecessary processing of
stale data.
.PP
Similarly, clients should also precede this \fBrequest\fR
with a 0xFF byte to make sure the guest agent flushes any
partially read \s-1JSON\s0 data from a previous client connection.
.PP
\&\fBArguments:\fR
.ie n .IP """id: int""" 4
.el .IP "\f(CWid: int\fR" 4
.IX Item "id: int"
randomly generated 64\-bit integer
.PP
\&\fBReturns:\fR
The unique integer id passed in by the client
.PP
\&\fBSince:\fR
1.1
.PP
\&\fBguest-sync\fR  (Command)
Echo back a unique integer value
.PP
This is used by clients talking to the guest agent over the
wire to ensure the stream is in sync and doesn't contain stale
data from previous client. All guest agent responses should be
ignored until the provided unique integer value is returned,
and it is up to the client to handle stale whole or
partially-delivered \s-1JSON\s0 text in such a way that this response
can be obtained.
.PP
In cases where a partial stale response was previously
received by the client, this cannot always be done reliably.
One particular scenario being if qemu-ga responses are fed
character-by-character into a \s-1JSON\s0 parser. In these situations,
using guest-sync-delimited may be optimal.
.PP
For clients that fetch responses line by line and convert them
to \s-1JSON\s0 objects, guest-sync should be sufficient, but note that
in cases where the channel is dirty some attempts at parsing the
response may result in a parser error.
.PP
Such clients should also precede this command
with a 0xFF byte to make sure the guest agent flushes any
partially read \s-1JSON\s0 data from a previous session.
.PP
\&\fBArguments:\fR
.ie n .IP """id: int""" 4
.el .IP "\f(CWid: int\fR" 4
.IX Item "id: int"
randomly generated 64\-bit integer
.PP
\&\fBReturns:\fR
The unique integer id passed in by the client
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-ping\fR  (Command)
Ping the guest agent, a non-error return implies success
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-get-time\fR  (Command)
Get the information about guest's System Time relative to
the Epoch of 1970\-01\-01 in \s-1UTC.\s0
.PP
\&\fBReturns:\fR
Time in nanoseconds.
.PP
\&\fBSince:\fR
1.5
.PP
\&\fBguest-set-time\fR  (Command)
Set guest time.
.PP
When a guest is paused or migrated to a file then loaded
from that file, the guest \s-1OS\s0 has no idea that there
was a big gap in the time. Depending on how long the
gap was, \s-1NTP\s0 might not be able to resynchronize the
guest.
.PP
This command tries to set guest's System Time to the
given value, then sets the Hardware Clock (\s-1RTC\s0) to the
current System Time. This will make it easier for a guest
to resynchronize without waiting for \s-1NTP.\s0 If no \f(CW\*(C`time\*(C'\fR is
specified, then the time to set is read from \s-1RTC.\s0 However,
this may not be supported on all platforms (i.e. Windows).
If that's the case users are advised to always pass a
value.
.PP
\&\fBArguments:\fR
.ie n .IP """time: int"" (optional)" 4
.el .IP "\f(CWtime: int\fR (optional)" 4
.IX Item "time: int (optional)"
time of nanoseconds, relative to the Epoch
of 1970\-01\-01 in \s-1UTC.\s0
.PP
\&\fBReturns:\fR
Nothing on success.
.PP
\&\fBSince:\fR
1.5
.PP
\&\fBGuestAgentCommandInfo\fR (Object)
.PP
Information about guest agent commands.
.PP
\&\fBMembers:\fR
.ie n .IP """name: string""" 4
.el .IP "\f(CWname: string\fR" 4
.IX Item "name: string"
name of the command
.ie n .IP """enabled: boolean""" 4
.el .IP "\f(CWenabled: boolean\fR" 4
.IX Item "enabled: boolean"
whether command is currently enabled by guest admin
.ie n .IP """success\-response: boolean""" 4
.el .IP "\f(CWsuccess\-response: boolean\fR" 4
.IX Item "success-response: boolean"
whether command returns a response on success
(since 1.7)
.PP
\&\fBSince:\fR
1.1.0
.PP
\&\fBGuestAgentInfo\fR (Object)
.PP
Information about guest agent.
.PP
\&\fBMembers:\fR
.ie n .IP """version: string""" 4
.el .IP "\f(CWversion: string\fR" 4
.IX Item "version: string"
guest agent version
.ie n .IP """supported_commands: array of GuestAgentCommandInfo""" 4
.el .IP "\f(CWsupported_commands: array of GuestAgentCommandInfo\fR" 4
.IX Item "supported_commands: array of GuestAgentCommandInfo"
Information about guest agent commands
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-info\fR  (Command)
Get some information about the guest agent.
.PP
\&\fBReturns:\fR
\&\f(CW\*(C`GuestAgentInfo\*(C'\fR
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-shutdown\fR  (Command)
Initiate guest-activated shutdown. Note: this is an asynchronous
shutdown request, with no guarantee of successful shutdown.
.PP
\&\fBArguments:\fR
.ie n .IP """mode: string"" (optional)" 4
.el .IP "\f(CWmode: string\fR (optional)" 4
.IX Item "mode: string (optional)"
\&\*(L"halt\*(R", \*(L"powerdown\*(R" (default), or \*(L"reboot\*(R"
.PP
This command does \s-1NOT\s0 return a response on success. Success condition
is indicated by the \s-1VM\s0 exiting with a zero exit status or, when
running with \-\-no\-shutdown, by issuing the query-status \s-1QMP\s0 command
to confirm the \s-1VM\s0 status is \*(L"shutdown\*(R".
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-file-open\fR  (Command)
Open a file in the guest and retrieve a file handle for it
.PP
\&\fBArguments:\fR
.ie n .IP """path: string""" 4
.el .IP "\f(CWpath: string\fR" 4
.IX Item "path: string"
Full path to the file in the guest to open.
.ie n .IP """mode: string"" (optional)" 4
.el .IP "\f(CWmode: string\fR (optional)" 4
.IX Item "mode: string (optional)"
open mode, as per \fBfopen()\fR, \*(L"r\*(R" is the default.
.PP
\&\fBReturns:\fR
Guest file handle on success.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-file-close\fR  (Command)
Close an open file in the guest
.PP
\&\fBArguments:\fR
.ie n .IP """handle: int""" 4
.el .IP "\f(CWhandle: int\fR" 4
.IX Item "handle: int"
filehandle returned by guest-file-open
.PP
\&\fBReturns:\fR
Nothing on success.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBGuestFileRead\fR (Object)
.PP
Result of guest agent file-read operation
.PP
\&\fBMembers:\fR
.ie n .IP """count: int""" 4
.el .IP "\f(CWcount: int\fR" 4
.IX Item "count: int"
number of bytes read (note: count is \fBbefore\fR
base64\-encoding is applied)
.ie n .IP """buf\-b64: string""" 4
.el .IP "\f(CWbuf\-b64: string\fR" 4
.IX Item "buf-b64: string"
base64\-encoded bytes read
.ie n .IP """eof: boolean""" 4
.el .IP "\f(CWeof: boolean\fR" 4
.IX Item "eof: boolean"
whether \s-1EOF\s0 was encountered during read operation.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-file-read\fR  (Command)
Read from an open file in the guest. Data will be base64\-encoded
.PP
\&\fBArguments:\fR
.ie n .IP """handle: int""" 4
.el .IP "\f(CWhandle: int\fR" 4
.IX Item "handle: int"
filehandle returned by guest-file-open
.ie n .IP """count: int"" (optional)" 4
.el .IP "\f(CWcount: int\fR (optional)" 4
.IX Item "count: int (optional)"
maximum number of bytes to read (default is 4KB)
.PP
\&\fBReturns:\fR
\&\f(CW\*(C`GuestFileRead\*(C'\fR on success.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBGuestFileWrite\fR (Object)
.PP
Result of guest agent file-write operation
.PP
\&\fBMembers:\fR
.ie n .IP """count: int""" 4
.el .IP "\f(CWcount: int\fR" 4
.IX Item "count: int"
number of bytes written (note: count is actual bytes
written, after base64\-decoding of provided buffer)
.ie n .IP """eof: boolean""" 4
.el .IP "\f(CWeof: boolean\fR" 4
.IX Item "eof: boolean"
whether \s-1EOF\s0 was encountered during write operation.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-file-write\fR  (Command)
Write to an open file in the guest.
.PP
\&\fBArguments:\fR
.ie n .IP """handle: int""" 4
.el .IP "\f(CWhandle: int\fR" 4
.IX Item "handle: int"
filehandle returned by guest-file-open
.ie n .IP """buf\-b64: string""" 4
.el .IP "\f(CWbuf\-b64: string\fR" 4
.IX Item "buf-b64: string"
base64\-encoded string representing data to be written
.ie n .IP """count: int"" (optional)" 4
.el .IP "\f(CWcount: int\fR (optional)" 4
.IX Item "count: int (optional)"
bytes to write (actual bytes, after base64\-decode),
default is all content in buf\-b64 buffer after base64 decoding
.PP
\&\fBReturns:\fR
\&\f(CW\*(C`GuestFileWrite\*(C'\fR on success.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBGuestFileSeek\fR (Object)
.PP
Result of guest agent file-seek operation
.PP
\&\fBMembers:\fR
.ie n .IP """position: int""" 4
.el .IP "\f(CWposition: int\fR" 4
.IX Item "position: int"
current file position
.ie n .IP """eof: boolean""" 4
.el .IP "\f(CWeof: boolean\fR" 4
.IX Item "eof: boolean"
whether \s-1EOF\s0 was encountered during file seek
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBQGASeek\fR (Enum)
.PP
Symbolic names for use in \f(CW\*(C`guest\-file\-seek\*(C'\fR
.PP
\&\fBValues:\fR
.ie n .IP """set""" 4
.el .IP "\f(CWset\fR" 4
.IX Item "set"
Set to the specified offset (same effect as 'whence':0)
.ie n .IP """cur""" 4
.el .IP "\f(CWcur\fR" 4
.IX Item "cur"
Add offset to the current location (same effect as 'whence':1)
.ie n .IP """end""" 4
.el .IP "\f(CWend\fR" 4
.IX Item "end"
Add offset to the end of the file (same effect as 'whence':2)
.PP
\&\fBSince:\fR
2.6
.PP
\&\fBGuestFileWhence\fR (Alternate)
.PP
Controls the meaning of offset to \f(CW\*(C`guest\-file\-seek\*(C'\fR.
.PP
\&\fBMembers:\fR
.ie n .IP """value: int""" 4
.el .IP "\f(CWvalue: int\fR" 4
.IX Item "value: int"
Integral value (0 for set, 1 for cur, 2 for end), available
for historical reasons, and might differ from the host's or
guest's SEEK_* values (since: 0.15)
.ie n .IP """name: QGASeek""" 4
.el .IP "\f(CWname: QGASeek\fR" 4
.IX Item "name: QGASeek"
Symbolic name, and preferred interface
.PP
\&\fBSince:\fR
2.6
.PP
\&\fBguest-file-seek\fR  (Command)
Seek to a position in the file, as with \fBfseek()\fR, and return the
current file position afterward. Also encapsulates \fBftell()\fR's
functionality, with offset=0 and whence=1.
.PP
\&\fBArguments:\fR
.ie n .IP """handle: int""" 4
.el .IP "\f(CWhandle: int\fR" 4
.IX Item "handle: int"
filehandle returned by guest-file-open
.ie n .IP """offset: int""" 4
.el .IP "\f(CWoffset: int\fR" 4
.IX Item "offset: int"
bytes to skip over in the file stream
.ie n .IP """whence: GuestFileWhence""" 4
.el .IP "\f(CWwhence: GuestFileWhence\fR" 4
.IX Item "whence: GuestFileWhence"
Symbolic or numeric code for interpreting offset
.PP
\&\fBReturns:\fR
\&\f(CW\*(C`GuestFileSeek\*(C'\fR on success.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-file-flush\fR  (Command)
Write file changes bufferred in userspace to disk/kernel buffers
.PP
\&\fBArguments:\fR
.ie n .IP """handle: int""" 4
.el .IP "\f(CWhandle: int\fR" 4
.IX Item "handle: int"
filehandle returned by guest-file-open
.PP
\&\fBReturns:\fR
Nothing on success.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBGuestFsfreezeStatus\fR (Enum)
.PP
An enumeration of filesystem freeze states
.PP
\&\fBValues:\fR
.ie n .IP """thawed""" 4
.el .IP "\f(CWthawed\fR" 4
.IX Item "thawed"
filesystems thawed/unfrozen
.ie n .IP """frozen""" 4
.el .IP "\f(CWfrozen\fR" 4
.IX Item "frozen"
all non-network guest filesystems frozen
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-fsfreeze-status\fR  (Command)
Get guest fsfreeze state. error state indicates
.PP
\&\fBReturns:\fR
GuestFsfreezeStatus (\*(L"thawed\*(R", \*(L"frozen\*(R", etc., as defined below)
.PP
\&\fBNote:\fR
This may fail to properly report the current state as a result of
some other guest processes having issued an fs freeze/thaw.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-fsfreeze-freeze\fR  (Command)
Sync and freeze all freezable, local guest filesystems. If this
command succeeded, you may call \f(CW\*(C`guest\-fsfreeze\-thaw\*(C'\fR later to
unfreeze.
.PP
\&\fBNote:\fR
On Windows, the command is implemented with the help of a
Volume Shadow-copy Service \s-1DLL\s0 helper. The frozen state is limited
for up to 10 seconds by \s-1VSS.\s0
.PP
\&\fBReturns:\fR
Number of file systems currently frozen. On error, all filesystems
will be thawed. If no filesystems are frozen as a result of this call,
then \f(CW\*(C`guest\-fsfreeze\-status\*(C'\fR will remain \*(L"thawed\*(R" and calling
\&\f(CW\*(C`guest\-fsfreeze\-thaw\*(C'\fR is not necessary.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBguest-fsfreeze-freeze-list\fR  (Command)
Sync and freeze specified guest filesystems.
See also \f(CW\*(C`guest\-fsfreeze\-freeze\*(C'\fR.
.PP
\&\fBArguments:\fR
.ie n .IP """mountpoints: array of string"" (optional)" 4
.el .IP "\f(CWmountpoints: array of string\fR (optional)" 4
.IX Item "mountpoints: array of string (optional)"
an array of mountpoints of filesystems to be frozen.
If omitted, every mounted filesystem is frozen.
Invalid mount points are ignored.
.PP
\&\fBReturns:\fR
Number of file systems currently frozen. On error, all filesystems
will be thawed.
.PP
\&\fBSince:\fR
2.2
.PP
\&\fBguest-fsfreeze-thaw\fR  (Command)
Unfreeze all frozen guest filesystems
.PP
\&\fBReturns:\fR
Number of file systems thawed by this call
.PP
\&\fBNote:\fR
if return value does not match the previous call to
guest-fsfreeze-freeze, this likely means some freezable
filesystems were unfrozen before this call, and that the
filesystem state may have changed before issuing this
command.
.PP
\&\fBSince:\fR
0.15.0
.PP
\&\fBGuestFilesystemTrimResult\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """path: string""" 4
.el .IP "\f(CWpath: string\fR" 4
.IX Item "path: string"
path that was trimmed
.ie n .IP """error: string"" (optional)" 4
.el .IP "\f(CWerror: string\fR (optional)" 4
.IX Item "error: string (optional)"
an error message when trim failed
.ie n .IP """trimmed: int"" (optional)" 4
.el .IP "\f(CWtrimmed: int\fR (optional)" 4
.IX Item "trimmed: int (optional)"
bytes trimmed for this path
.ie n .IP """minimum: int"" (optional)" 4
.el .IP "\f(CWminimum: int\fR (optional)" 4
.IX Item "minimum: int (optional)"
reported effective minimum for this path
.PP
\&\fBSince:\fR
2.4
.PP
\&\fBGuestFilesystemTrimResponse\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """paths: array of GuestFilesystemTrimResult""" 4
.el .IP "\f(CWpaths: array of GuestFilesystemTrimResult\fR" 4
.IX Item "paths: array of GuestFilesystemTrimResult"
list of \f(CW\*(C`GuestFilesystemTrimResult\*(C'\fR per path that was trimmed
.PP
\&\fBSince:\fR
2.4
.PP
\&\fBguest-fstrim\fR  (Command)
Discard (or \*(L"trim\*(R") blocks which are not in use by the filesystem.
.PP
\&\fBArguments:\fR
.ie n .IP """minimum: int"" (optional)" 4
.el .IP "\f(CWminimum: int\fR (optional)" 4
.IX Item "minimum: int (optional)"
Minimum contiguous free range to discard, in bytes. Free ranges
smaller than this may be ignored (this is a hint and the guest
may not respect it).  By increasing this value, the fstrim
operation will complete more quickly for filesystems with badly
fragmented free space, although not all blocks will be discarded.
The default value is zero, meaning \*(L"discard every free block\*(R".
.PP
\&\fBReturns:\fR
A \f(CW\*(C`GuestFilesystemTrimResponse\*(C'\fR which contains the
status of all trimmed paths. (since 2.4)
.PP
\&\fBSince:\fR
1.2
.PP
\&\fBguest-suspend-disk\fR  (Command)
Suspend guest to disk.
.PP
This command tries to execute the scripts provided by the pm-utils package.
If it's not available, the suspend operation will be performed by manually
writing to a sysfs file.
.PP
For the best results it's strongly recommended to have the pm-utils
package installed in the guest.
.PP
This command does \s-1NOT\s0 return a response on success. There is a high chance
the command succeeded if the \s-1VM\s0 exits with a zero exit status or, when
running with \-\-no\-shutdown, by issuing the query-status \s-1QMP\s0 command to
to confirm the \s-1VM\s0 status is \*(L"shutdown\*(R". However, the \s-1VM\s0 could also exit
(or set its status to \*(L"shutdown\*(R") due to other reasons.
.PP
The following errors may be returned:
If suspend to disk is not supported, Unsupported
.PP
\&\fBNotes:\fR
It's strongly recommended to issue the guest-sync command before
sending commands when the guest resumes
.PP
\&\fBSince:\fR
1.1
.PP
\&\fBguest-suspend-ram\fR  (Command)
Suspend guest to ram.
.PP
This command tries to execute the scripts provided by the pm-utils package.
If it's not available, the suspend operation will be performed by manually
writing to a sysfs file.
.PP
For the best results it's strongly recommended to have the pm-utils
package installed in the guest.
.PP
\&\s-1IMPORTANT:\s0 guest-suspend-ram requires \s-1QEMU\s0 to support the 'system_wakeup'
command.  Thus, it's \fBrequired\fR to query \s-1QEMU\s0 for the presence of the
\&'system_wakeup' command before issuing guest-suspend-ram.
.PP
This command does \s-1NOT\s0 return a response on success. There are two options
to check for success:
.IP "1." 4
Wait for the \s-1SUSPEND QMP\s0 event from \s-1QEMU\s0
.IP "2." 4
Issue the query-status \s-1QMP\s0 command to confirm the \s-1VM\s0 status is
\&\*(L"suspended\*(R"
.PP
The following errors may be returned:
If suspend to ram is not supported, Unsupported
.PP
\&\fBNotes:\fR
It's strongly recommended to issue the guest-sync command before
sending commands when the guest resumes
.PP
\&\fBSince:\fR
1.1
.PP
\&\fBguest-suspend-hybrid\fR  (Command)
Save guest state to disk and suspend to ram.
.PP
This command requires the pm-utils package to be installed in the guest.
.PP
\&\s-1IMPORTANT:\s0 guest-suspend-hybrid requires \s-1QEMU\s0 to support the 'system_wakeup'
command.  Thus, it's \fBrequired\fR to query \s-1QEMU\s0 for the presence of the
\&'system_wakeup' command before issuing guest-suspend-hybrid.
.PP
This command does \s-1NOT\s0 return a response on success. There are two options
to check for success:
.IP "1." 4
Wait for the \s-1SUSPEND QMP\s0 event from \s-1QEMU\s0
.IP "2." 4
Issue the query-status \s-1QMP\s0 command to confirm the \s-1VM\s0 status is
\&\*(L"suspended\*(R"
.PP
The following errors may be returned:
If hybrid suspend is not supported, Unsupported
.PP
\&\fBNotes:\fR
It's strongly recommended to issue the guest-sync command before
sending commands when the guest resumes
.PP
\&\fBSince:\fR
1.1
.PP
\&\fBGuestIpAddressType\fR (Enum)
.PP
An enumeration of supported \s-1IP\s0 address types
.PP
\&\fBValues:\fR
.ie n .IP """ipv4""" 4
.el .IP "\f(CWipv4\fR" 4
.IX Item "ipv4"
\&\s-1IP\s0 version 4
.ie n .IP """ipv6""" 4
.el .IP "\f(CWipv6\fR" 4
.IX Item "ipv6"
\&\s-1IP\s0 version 6
.PP
\&\fBSince:\fR
1.1
.PP
\&\fBGuestIpAddress\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """ip\-address: string""" 4
.el .IP "\f(CWip\-address: string\fR" 4
.IX Item "ip-address: string"
\&\s-1IP\s0 address
.ie n .IP """ip\-address\-type: GuestIpAddressType""" 4
.el .IP "\f(CWip\-address\-type: GuestIpAddressType\fR" 4
.IX Item "ip-address-type: GuestIpAddressType"
Type of \f(CW\*(C`ip\-address\*(C'\fR (e.g. ipv4, ipv6)
.ie n .IP """prefix: int""" 4
.el .IP "\f(CWprefix: int\fR" 4
.IX Item "prefix: int"
Network prefix length of \f(CW\*(C`ip\-address\*(C'\fR
.PP
\&\fBSince:\fR
1.1
.PP
\&\fBGuestNetworkInterfaceStat\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """rx\-bytes: int""" 4
.el .IP "\f(CWrx\-bytes: int\fR" 4
.IX Item "rx-bytes: int"
total bytes received
.ie n .IP """rx\-packets: int""" 4
.el .IP "\f(CWrx\-packets: int\fR" 4
.IX Item "rx-packets: int"
total packets received
.ie n .IP """rx\-errs: int""" 4
.el .IP "\f(CWrx\-errs: int\fR" 4
.IX Item "rx-errs: int"
bad packets received
.ie n .IP """rx\-dropped: int""" 4
.el .IP "\f(CWrx\-dropped: int\fR" 4
.IX Item "rx-dropped: int"
receiver dropped packets
.ie n .IP """tx\-bytes: int""" 4
.el .IP "\f(CWtx\-bytes: int\fR" 4
.IX Item "tx-bytes: int"
total bytes transmitted
.ie n .IP """tx\-packets: int""" 4
.el .IP "\f(CWtx\-packets: int\fR" 4
.IX Item "tx-packets: int"
total packets transmitted
.ie n .IP """tx\-errs: int""" 4
.el .IP "\f(CWtx\-errs: int\fR" 4
.IX Item "tx-errs: int"
packet transmit problems
.ie n .IP """tx\-dropped: int""" 4
.el .IP "\f(CWtx\-dropped: int\fR" 4
.IX Item "tx-dropped: int"
dropped packets transmitted
.PP
\&\fBSince:\fR
2.11
.PP
\&\fBGuestNetworkInterface\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """name: string""" 4
.el .IP "\f(CWname: string\fR" 4
.IX Item "name: string"
The name of interface for which info are being delivered
.ie n .IP """hardware\-address: string"" (optional)" 4
.el .IP "\f(CWhardware\-address: string\fR (optional)" 4
.IX Item "hardware-address: string (optional)"
Hardware address of \f(CW\*(C`name\*(C'\fR
.ie n .IP """ip\-addresses: array of GuestIpAddress"" (optional)" 4
.el .IP "\f(CWip\-addresses: array of GuestIpAddress\fR (optional)" 4
.IX Item "ip-addresses: array of GuestIpAddress (optional)"
List of addresses assigned to \f(CW\*(C`name\*(C'\fR
.ie n .IP """statistics: GuestNetworkInterfaceStat"" (optional)" 4
.el .IP "\f(CWstatistics: GuestNetworkInterfaceStat\fR (optional)" 4
.IX Item "statistics: GuestNetworkInterfaceStat (optional)"
various statistic counters related to \f(CW\*(C`name\*(C'\fR
(since 2.11)
.PP
\&\fBSince:\fR
1.1
.PP
\&\fBguest-network-get-interfaces\fR  (Command)
Get list of guest \s-1IP\s0 addresses, \s-1MAC\s0 addresses
and netmasks.
.PP
\&\fBReturns:\fR
List of GuestNetworkInfo on success.
.PP
\&\fBSince:\fR
1.1
.PP
\&\fBGuestLogicalProcessor\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """logical\-id: int""" 4
.el .IP "\f(CWlogical\-id: int\fR" 4
.IX Item "logical-id: int"
Arbitrary guest-specific unique identifier of the \s-1VCPU.\s0
.ie n .IP """online: boolean""" 4
.el .IP "\f(CWonline: boolean\fR" 4
.IX Item "online: boolean"
Whether the \s-1VCPU\s0 is enabled.
.ie n .IP """can\-offline: boolean"" (optional)" 4
.el .IP "\f(CWcan\-offline: boolean\fR (optional)" 4
.IX Item "can-offline: boolean (optional)"
Whether offlining the \s-1VCPU\s0 is possible. This member
is always filled in by the guest agent when the structure is
returned, and always ignored on input (hence it can be omitted
then).
.PP
\&\fBSince:\fR
1.5
.PP
\&\fBguest-get-vcpus\fR  (Command)
Retrieve the list of the guest's logical processors.
.PP
This is a read-only operation.
.PP
\&\fBReturns:\fR
The list of all VCPUs the guest knows about. Each \s-1VCPU\s0 is put on the
list exactly once, but their order is unspecified.
.PP
\&\fBSince:\fR
1.5
.PP
\&\fBguest-set-vcpus\fR  (Command)
Attempt to reconfigure (currently: enable/disable) logical processors inside
the guest.
.PP
The input list is processed node by node in order. In each node \f(CW\*(C`logical\-id\*(C'\fR
is used to look up the guest \s-1VCPU,\s0 for which \f(CW\*(C`online\*(C'\fR specifies the requested
state. The set of distinct \f(CW\*(C`logical\-id\*(C'\fR's is only required to be a subset of
the guest-supported identifiers. There's no restriction on list length or on
repeating the same \f(CW\*(C`logical\-id\*(C'\fR (with possibly different \f(CW\*(C`online\*(C'\fR field).
Preferably the input list should describe a modified subset of
\&\f(CW\*(C`guest\-get\-vcpus\*(C'\fR' return value.
.PP
\&\fBArguments:\fR
.ie n .IP """vcpus: array of GuestLogicalProcessor""" 4
.el .IP "\f(CWvcpus: array of GuestLogicalProcessor\fR" 4
.IX Item "vcpus: array of GuestLogicalProcessor"
Not documented
.PP
\&\fBReturns:\fR
The length of the initial sublist that has been successfully
processed. The guest agent maximizes this value. Possible cases:
.IP "\-" 4
0:              if the \f(CW\*(C`vcpus\*(C'\fR list was empty on input. Guest state
has not been changed. Otherwise,
.IP "\-" 4
Error:          processing the first node of \f(CW\*(C`vcpus\*(C'\fR failed for the
reason returned. Guest state has not been changed.
Otherwise,
.IP "\-" 4
< length(\f(CW\*(C`vcpus\*(C'\fR): more than zero initial nodes have been processed,
but not the entire \f(CW\*(C`vcpus\*(C'\fR list. Guest state has
changed accordingly. To retrieve the error
(assuming it persists), repeat the call with the
successfully processed initial sublist removed.
Otherwise,
.IP "\-" 4
length(\f(CW\*(C`vcpus\*(C'\fR): call successful.
.PP
\&\fBSince:\fR
1.5
.PP
\&\fBGuestDiskBusType\fR (Enum)
.PP
An enumeration of bus type of disks
.PP
\&\fBValues:\fR
.ie n .IP """ide""" 4
.el .IP "\f(CWide\fR" 4
.IX Item "ide"
\&\s-1IDE\s0 disks
.ie n .IP """fdc""" 4
.el .IP "\f(CWfdc\fR" 4
.IX Item "fdc"
floppy disks
.ie n .IP """scsi""" 4
.el .IP "\f(CWscsi\fR" 4
.IX Item "scsi"
\&\s-1SCSI\s0 disks
.ie n .IP """virtio""" 4
.el .IP "\f(CWvirtio\fR" 4
.IX Item "virtio"
virtio disks
.ie n .IP """xen""" 4
.el .IP "\f(CWxen\fR" 4
.IX Item "xen"
Xen disks
.ie n .IP """usb""" 4
.el .IP "\f(CWusb\fR" 4
.IX Item "usb"
\&\s-1USB\s0 disks
.ie n .IP """uml""" 4
.el .IP "\f(CWuml\fR" 4
.IX Item "uml"
\&\s-1UML\s0 disks
.ie n .IP """sata""" 4
.el .IP "\f(CWsata\fR" 4
.IX Item "sata"
\&\s-1SATA\s0 disks
.ie n .IP """sd""" 4
.el .IP "\f(CWsd\fR" 4
.IX Item "sd"
\&\s-1SD\s0 cards
.ie n .IP """unknown""" 4
.el .IP "\f(CWunknown\fR" 4
.IX Item "unknown"
Unknown bus type
.ie n .IP """ieee1394""" 4
.el .IP "\f(CWieee1394\fR" 4
.IX Item "ieee1394"
Win \s-1IEEE 1394\s0 bus type
.ie n .IP """ssa""" 4
.el .IP "\f(CWssa\fR" 4
.IX Item "ssa"
Win \s-1SSA\s0 bus type
.ie n .IP """fibre""" 4
.el .IP "\f(CWfibre\fR" 4
.IX Item "fibre"
Win fiber channel bus type
.ie n .IP """raid""" 4
.el .IP "\f(CWraid\fR" 4
.IX Item "raid"
Win \s-1RAID\s0 bus type
.ie n .IP """iscsi""" 4
.el .IP "\f(CWiscsi\fR" 4
.IX Item "iscsi"
Win iScsi bus type
.ie n .IP """sas""" 4
.el .IP "\f(CWsas\fR" 4
.IX Item "sas"
Win serial-attaches \s-1SCSI\s0 bus type
.ie n .IP """mmc""" 4
.el .IP "\f(CWmmc\fR" 4
.IX Item "mmc"
Win multimedia card (\s-1MMC\s0) bus type
.ie n .IP """virtual""" 4
.el .IP "\f(CWvirtual\fR" 4
.IX Item "virtual"
Win virtual bus type
\&\f(CW\*(C`file\-backed\*(C'\fR virtual: Win file-backed bus type
.ie n .IP """file\-backed\-virtual""" 4
.el .IP "\f(CWfile\-backed\-virtual\fR" 4
.IX Item "file-backed-virtual"
Not documented
.PP
\&\fBSince:\fR
2.2; 'Unknown' and all entries below since 2.4
.PP
\&\fBGuestPCIAddress\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """domain: int""" 4
.el .IP "\f(CWdomain: int\fR" 4
.IX Item "domain: int"
domain id
.ie n .IP """bus: int""" 4
.el .IP "\f(CWbus: int\fR" 4
.IX Item "bus: int"
bus id
.ie n .IP """slot: int""" 4
.el .IP "\f(CWslot: int\fR" 4
.IX Item "slot: int"
slot id
.ie n .IP """function: int""" 4
.el .IP "\f(CWfunction: int\fR" 4
.IX Item "function: int"
function id
.PP
\&\fBSince:\fR
2.2
.PP
\&\fBGuestDiskAddress\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """pci\-controller: GuestPCIAddress""" 4
.el .IP "\f(CWpci\-controller: GuestPCIAddress\fR" 4
.IX Item "pci-controller: GuestPCIAddress"
controller's \s-1PCI\s0 address
.ie n .IP """bus\-type: GuestDiskBusType""" 4
.el .IP "\f(CWbus\-type: GuestDiskBusType\fR" 4
.IX Item "bus-type: GuestDiskBusType"
bus type
.ie n .IP """bus: int""" 4
.el .IP "\f(CWbus: int\fR" 4
.IX Item "bus: int"
bus id
.ie n .IP """target: int""" 4
.el .IP "\f(CWtarget: int\fR" 4
.IX Item "target: int"
target id
.ie n .IP """unit: int""" 4
.el .IP "\f(CWunit: int\fR" 4
.IX Item "unit: int"
unit id
.ie n .IP """serial: string"" (optional)" 4
.el .IP "\f(CWserial: string\fR (optional)" 4
.IX Item "serial: string (optional)"
serial number (since: 3.1)
.ie n .IP """dev: string"" (optional)" 4
.el .IP "\f(CWdev: string\fR (optional)" 4
.IX Item "dev: string (optional)"
device node (\s-1POSIX\s0) or device \s-1UNC\s0 (Windows) (since: 3.1)
.PP
\&\fBSince:\fR
2.2
.PP
\&\fBGuestFilesystemInfo\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """name: string""" 4
.el .IP "\f(CWname: string\fR" 4
.IX Item "name: string"
disk name
.ie n .IP """mountpoint: string""" 4
.el .IP "\f(CWmountpoint: string\fR" 4
.IX Item "mountpoint: string"
mount point path
.ie n .IP """type: string""" 4
.el .IP "\f(CWtype: string\fR" 4
.IX Item "type: string"
file system type string
.ie n .IP """used\-bytes: int"" (optional)" 4
.el .IP "\f(CWused\-bytes: int\fR (optional)" 4
.IX Item "used-bytes: int (optional)"
file system used bytes (since 3.0)
.ie n .IP """total\-bytes: int"" (optional)" 4
.el .IP "\f(CWtotal\-bytes: int\fR (optional)" 4
.IX Item "total-bytes: int (optional)"
non-root file system total bytes (since 3.0)
.ie n .IP """disk: array of GuestDiskAddress""" 4
.el .IP "\f(CWdisk: array of GuestDiskAddress\fR" 4
.IX Item "disk: array of GuestDiskAddress"
an array of disk hardware information that the volume lies on,
which may be empty if the disk type is not supported
.PP
\&\fBSince:\fR
2.2
.PP
\&\fBguest-get-fsinfo\fR  (Command)
.PP
\&\fBReturns:\fR
The list of filesystems information mounted in the guest.
The returned mountpoints may be specified to
\&\f(CW\*(C`guest\-fsfreeze\-freeze\-list\*(C'\fR.
Network filesystems (such as \s-1CIFS\s0 and \s-1NFS\s0) are not listed.
.PP
\&\fBSince:\fR
2.2
.PP
\&\fBguest-set-user-password\fR  (Command)
.PP
\&\fBArguments:\fR
.ie n .IP """username: string""" 4
.el .IP "\f(CWusername: string\fR" 4
.IX Item "username: string"
the user account whose password to change
.ie n .IP """password: string""" 4
.el .IP "\f(CWpassword: string\fR" 4
.IX Item "password: string"
the new password entry string, base64 encoded
.ie n .IP """crypted: boolean""" 4
.el .IP "\f(CWcrypted: boolean\fR" 4
.IX Item "crypted: boolean"
true if password is already \fBcrypt()\fRd, false if raw
.PP
If the \f(CW\*(C`crypted\*(C'\fR flag is true, it is the caller's responsibility
to ensure the correct \fBcrypt()\fR encryption scheme is used. This
command does not attempt to interpret or report on the encryption
scheme. Refer to the documentation of the guest operating system
in question to determine what is supported.
.PP
Not all guest operating systems will support use of the
\&\f(CW\*(C`crypted\*(C'\fR flag, as they may require the clear-text password
.PP
The \f(CW\*(C`password\*(C'\fR parameter must always be base64 encoded before
transmission, even if already \fBcrypt()\fRd, to ensure it is 8\-bit
safe when passed as \s-1JSON.\s0
.PP
\&\fBReturns:\fR
Nothing on success.
.PP
\&\fBSince:\fR
2.3
.PP
\&\fBGuestMemoryBlock\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """phys\-index: int""" 4
.el .IP "\f(CWphys\-index: int\fR" 4
.IX Item "phys-index: int"
Arbitrary guest-specific unique identifier of the \s-1MEMORY BLOCK.\s0
.ie n .IP """online: boolean""" 4
.el .IP "\f(CWonline: boolean\fR" 4
.IX Item "online: boolean"
Whether the \s-1MEMORY BLOCK\s0 is enabled in guest.
.ie n .IP """can\-offline: boolean"" (optional)" 4
.el .IP "\f(CWcan\-offline: boolean\fR (optional)" 4
.IX Item "can-offline: boolean (optional)"
Whether offlining the \s-1MEMORY BLOCK\s0 is possible.
This member is always filled in by the guest agent when the
structure is returned, and always ignored on input (hence it
can be omitted then).
.PP
\&\fBSince:\fR
2.3
.PP
\&\fBguest-get-memory-blocks\fR  (Command)
Retrieve the list of the guest's memory blocks.
.PP
This is a read-only operation.
.PP
\&\fBReturns:\fR
The list of all memory blocks the guest knows about.
Each memory block is put on the list exactly once, but their order
is unspecified.
.PP
\&\fBSince:\fR
2.3
.PP
\&\fBGuestMemoryBlockResponseType\fR (Enum)
.PP
An enumeration of memory block operation result.
.PP
\&\fBValues:\fR
.ie n .IP """success""" 4
.el .IP "\f(CWsuccess\fR" 4
.IX Item "success"
the operation of online/offline memory block is successful.
.ie n .IP """not\-found""" 4
.el .IP "\f(CWnot\-found\fR" 4
.IX Item "not-found"
can't find the corresponding memoryXXX directory in sysfs.
.ie n .IP """operation\-not\-supported""" 4
.el .IP "\f(CWoperation\-not\-supported\fR" 4
.IX Item "operation-not-supported"
for some old kernels, it does not support
online or offline memory block.
.ie n .IP """operation\-failed""" 4
.el .IP "\f(CWoperation\-failed\fR" 4
.IX Item "operation-failed"
the operation of online/offline memory block fails,
because of some errors happen.
.PP
\&\fBSince:\fR
2.3
.PP
\&\fBGuestMemoryBlockResponse\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """phys\-index: int""" 4
.el .IP "\f(CWphys\-index: int\fR" 4
.IX Item "phys-index: int"
same with the 'phys\-index' member of \f(CW\*(C`GuestMemoryBlock\*(C'\fR.
.ie n .IP """response: GuestMemoryBlockResponseType""" 4
.el .IP "\f(CWresponse: GuestMemoryBlockResponseType\fR" 4
.IX Item "response: GuestMemoryBlockResponseType"
the result of memory block operation.
.ie n .IP """error\-code: int"" (optional)" 4
.el .IP "\f(CWerror\-code: int\fR (optional)" 4
.IX Item "error-code: int (optional)"
the error number.
When memory block operation fails, we assign the value of
\&'errno' to this member, it indicates what goes wrong.
When the operation succeeds, it will be omitted.
.PP
\&\fBSince:\fR
2.3
.PP
\&\fBguest-set-memory-blocks\fR  (Command)
Attempt to reconfigure (currently: enable/disable) state of memory blocks
inside the guest.
.PP
The input list is processed node by node in order. In each node \f(CW\*(C`phys\-index\*(C'\fR
is used to look up the guest \s-1MEMORY BLOCK,\s0 for which \f(CW\*(C`online\*(C'\fR specifies the
requested state. The set of distinct \f(CW\*(C`phys\-index\*(C'\fR's is only required to be a
subset of the guest-supported identifiers. There's no restriction on list
length or on repeating the same \f(CW\*(C`phys\-index\*(C'\fR (with possibly different \f(CW\*(C`online\*(C'\fR
field).
Preferably the input list should describe a modified subset of
\&\f(CW\*(C`guest\-get\-memory\-blocks\*(C'\fR' return value.
.PP
\&\fBArguments:\fR
.ie n .IP """mem\-blks: array of GuestMemoryBlock""" 4
.el .IP "\f(CWmem\-blks: array of GuestMemoryBlock\fR" 4
.IX Item "mem-blks: array of GuestMemoryBlock"
Not documented
.PP
\&\fBReturns:\fR
The operation results, it is a list of \f(CW\*(C`GuestMemoryBlockResponse\*(C'\fR,
which is corresponding to the input list.
.PP
Note: it will return \s-1NULL\s0 if the \f(CW\*(C`mem\-blks\*(C'\fR list was empty on input,
or there is an error, and in this case, guest state will not be
changed.
.PP
\&\fBSince:\fR
2.3
.PP
\&\fBGuestMemoryBlockInfo\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """size: int""" 4
.el .IP "\f(CWsize: int\fR" 4
.IX Item "size: int"
the size (in bytes) of the guest memory blocks,
which are the minimal units of memory block online/offline
operations (also called Logical Memory Hotplug).
.PP
\&\fBSince:\fR
2.3
.PP
\&\fBguest-get-memory-block-info\fR  (Command)
Get information relating to guest memory blocks.
.PP
\&\fBReturns:\fR
\&\f(CW\*(C`GuestMemoryBlockInfo\*(C'\fR
.PP
\&\fBSince:\fR
2.3
.PP
\&\fBGuestExecStatus\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """exited: boolean""" 4
.el .IP "\f(CWexited: boolean\fR" 4
.IX Item "exited: boolean"
true if process has already terminated.
.ie n .IP """exitcode: int"" (optional)" 4
.el .IP "\f(CWexitcode: int\fR (optional)" 4
.IX Item "exitcode: int (optional)"
process exit code if it was normally terminated.
.ie n .IP """signal: int"" (optional)" 4
.el .IP "\f(CWsignal: int\fR (optional)" 4
.IX Item "signal: int (optional)"
signal number (linux) or unhandled exception code
(windows) if the process was abnormally terminated.
.ie n .IP """out\-data: string"" (optional)" 4
.el .IP "\f(CWout\-data: string\fR (optional)" 4
.IX Item "out-data: string (optional)"
base64\-encoded stdout of the process
.ie n .IP """err\-data: string"" (optional)" 4
.el .IP "\f(CWerr\-data: string\fR (optional)" 4
.IX Item "err-data: string (optional)"
base64\-encoded stderr of the process
Note: \f(CW\*(C`out\-data\*(C'\fR and \f(CW\*(C`err\-data\*(C'\fR are present only
if 'capture\-output' was specified for 'guest\-exec'
.ie n .IP """out\-truncated: boolean"" (optional)" 4
.el .IP "\f(CWout\-truncated: boolean\fR (optional)" 4
.IX Item "out-truncated: boolean (optional)"
true if stdout was not fully captured
due to size limitation.
.ie n .IP """err\-truncated: boolean"" (optional)" 4
.el .IP "\f(CWerr\-truncated: boolean\fR (optional)" 4
.IX Item "err-truncated: boolean (optional)"
true if stderr was not fully captured
due to size limitation.
.PP
\&\fBSince:\fR
2.5
.PP
\&\fBguest-exec-status\fR  (Command)
Check status of process associated with \s-1PID\s0 retrieved via guest-exec.
Reap the process and associated metadata if it has exited.
.PP
\&\fBArguments:\fR
.ie n .IP """pid: int""" 4
.el .IP "\f(CWpid: int\fR" 4
.IX Item "pid: int"
pid returned from guest-exec
.PP
\&\fBReturns:\fR
GuestExecStatus on success.
.PP
\&\fBSince:\fR
2.5
.PP
\&\fBGuestExec\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """pid: int""" 4
.el .IP "\f(CWpid: int\fR" 4
.IX Item "pid: int"
pid of child process in guest \s-1OS\s0
.PP
\&\fBSince:\fR
2.5
.PP
\&\fBguest-exec\fR  (Command)
Execute a command in the guest
.PP
\&\fBArguments:\fR
.ie n .IP """path: string""" 4
.el .IP "\f(CWpath: string\fR" 4
.IX Item "path: string"
path or executable name to execute
.ie n .IP """arg: array of string"" (optional)" 4
.el .IP "\f(CWarg: array of string\fR (optional)" 4
.IX Item "arg: array of string (optional)"
argument list to pass to executable
.ie n .IP """env: array of string"" (optional)" 4
.el .IP "\f(CWenv: array of string\fR (optional)" 4
.IX Item "env: array of string (optional)"
environment variables to pass to executable
.ie n .IP """input\-data: string"" (optional)" 4
.el .IP "\f(CWinput\-data: string\fR (optional)" 4
.IX Item "input-data: string (optional)"
data to be passed to process stdin (base64 encoded)
.ie n .IP """capture\-output: boolean"" (optional)" 4
.el .IP "\f(CWcapture\-output: boolean\fR (optional)" 4
.IX Item "capture-output: boolean (optional)"
bool flag to enable capture of
stdout/stderr of running process. defaults to false.
.PP
\&\fBReturns:\fR
\&\s-1PID\s0 on success.
.PP
\&\fBSince:\fR
2.5
.PP
\&\fBGuestHostName\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """host\-name: string""" 4
.el .IP "\f(CWhost\-name: string\fR" 4
.IX Item "host-name: string"
Fully qualified domain name of the guest \s-1OS\s0
.PP
\&\fBSince:\fR
2.10
.PP
\&\fBguest-get-host-name\fR  (Command)
Return a name for the machine.
.PP
The returned name is not necessarily a fully-qualified domain name, or even
present in \s-1DNS\s0 or some other name service at all. It need not even be unique
on your local network or site, but usually it is.
.PP
\&\fBReturns:\fR
the host name of the machine on success
.PP
\&\fBSince:\fR
2.10
.PP
\&\fBGuestUser\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """user: string""" 4
.el .IP "\f(CWuser: string\fR" 4
.IX Item "user: string"
Username
.ie n .IP """domain: string"" (optional)" 4
.el .IP "\f(CWdomain: string\fR (optional)" 4
.IX Item "domain: string (optional)"
Logon domain (windows only)
.ie n .IP """login\-time: number""" 4
.el .IP "\f(CWlogin\-time: number\fR" 4
.IX Item "login-time: number"
Time of login of this user on the computer. If multiple
instances of the user are logged in, the earliest login time is
reported. The value is in fractional seconds since epoch time.
.PP
\&\fBSince:\fR
2.10
.PP
\&\fBguest-get-users\fR  (Command)
Retrieves a list of currently active users on the \s-1VM.\s0
.PP
\&\fBReturns:\fR
A unique list of users.
.PP
\&\fBSince:\fR
2.10
.PP
\&\fBGuestTimezone\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """zone: string"" (optional)" 4
.el .IP "\f(CWzone: string\fR (optional)" 4
.IX Item "zone: string (optional)"
Timezone name. These values may differ depending on guest/OS and
should only be used for informational purposes.
.ie n .IP """offset: int""" 4
.el .IP "\f(CWoffset: int\fR" 4
.IX Item "offset: int"
Offset to \s-1UTC\s0 in seconds, negative numbers for time zones west of
\&\s-1GMT,\s0 positive numbers for east
.PP
\&\fBSince:\fR
2.10
.PP
\&\fBguest-get-timezone\fR  (Command)
Retrieves the timezone information from the guest.
.PP
\&\fBReturns:\fR
A GuestTimezone dictionary.
.PP
\&\fBSince:\fR
2.10
.PP
\&\fBGuestOSInfo\fR (Object)
.PP
\&\fBMembers:\fR
.ie n .IP """kernel\-release: string"" (optional)" 4
.el .IP "\f(CWkernel\-release: string\fR (optional)" 4
.IX Item "kernel-release: string (optional)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\s-1POSIX:\s0 release field returned by \fBuname\fR\|(2)
.IP "\(bu" 4
Windows: build number of the \s-1OS\s0
.RE
.RS 4
.RE
.ie n .IP """kernel\-version: string"" (optional)" 4
.el .IP "\f(CWkernel\-version: string\fR (optional)" 4
.IX Item "kernel-version: string (optional)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\s-1POSIX:\s0 version field returned by \fBuname\fR\|(2)
.IP "\(bu" 4
Windows: version number of the \s-1OS\s0
.RE
.RS 4
.RE
.ie n .IP """machine: string"" (optional)" 4
.el .IP "\f(CWmachine: string\fR (optional)" 4
.IX Item "machine: string (optional)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\s-1POSIX:\s0 machine field returned by \fBuname\fR\|(2)
.IP "\(bu" 4
Windows: one of x86, x86_64, arm, ia64
.RE
.RS 4
.RE
.ie n .IP """id: string"" (optional)" 4
.el .IP "\f(CWid: string\fR (optional)" 4
.IX Item "id: string (optional)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\s-1POSIX:\s0 as defined by \fBos\-release\fR\|(5)
.IP "\(bu" 4
Windows: contains string \*(L"mswindows\*(R"
.RE
.RS 4
.RE
.ie n .IP """name: string"" (optional)" 4
.el .IP "\f(CWname: string\fR (optional)" 4
.IX Item "name: string (optional)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\s-1POSIX:\s0 as defined by \fBos\-release\fR\|(5)
.IP "\(bu" 4
Windows: contains string \*(L"Microsoft Windows\*(R"
.RE
.RS 4
.RE
.ie n .IP """pretty\-name: string"" (optional)" 4
.el .IP "\f(CWpretty\-name: string\fR (optional)" 4
.IX Item "pretty-name: string (optional)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\s-1POSIX:\s0 as defined by \fBos\-release\fR\|(5)
.IP "\(bu" 4
Windows: product name, e.g. \*(L"Microsoft Windows 10 Enterprise\*(R"
.RE
.RS 4
.RE
.ie n .IP """version: string"" (optional)" 4
.el .IP "\f(CWversion: string\fR (optional)" 4
.IX Item "version: string (optional)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\s-1POSIX:\s0 as defined by \fBos\-release\fR\|(5)
.IP "\(bu" 4
Windows: long version string, e.g. \*(L"Microsoft Windows Server 2008\*(R"
.RE
.RS 4
.RE
.ie n .IP """version\-id: string"" (optional)" 4
.el .IP "\f(CWversion\-id: string\fR (optional)" 4
.IX Item "version-id: string (optional)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\s-1POSIX:\s0 as defined by \fBos\-release\fR\|(5)
.IP "\(bu" 4
Windows: short version identifier, e.g. \*(L"7\*(R" or \*(L"20012r2\*(R"
.RE
.RS 4
.RE
.ie n .IP """variant: string"" (optional)" 4
.el .IP "\f(CWvariant: string\fR (optional)" 4
.IX Item "variant: string (optional)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\s-1POSIX:\s0 as defined by \fBos\-release\fR\|(5)
.IP "\(bu" 4
Windows: contains string \*(L"server\*(R" or \*(L"client\*(R"
.RE
.RS 4
.RE
.ie n .IP """variant\-id: string"" (optional)" 4
.el .IP "\f(CWvariant\-id: string\fR (optional)" 4
.IX Item "variant-id: string (optional)"
.RS 4
.PD 0
.IP "\(bu" 4
.PD
\&\s-1POSIX:\s0 as defined by \fBos\-release\fR\|(5)
.IP "\(bu" 4
Windows: contains string \*(L"server\*(R" or \*(L"client\*(R"
.RE
.RS 4
.RE
.PP
\&\fBNotes:\fR
On \s-1POSIX\s0 systems the fields \f(CW\*(C`id\*(C'\fR, \f(CW\*(C`name\*(C'\fR, \f(CW\*(C`pretty\-name\*(C'\fR, \f(CW\*(C`version\*(C'\fR, \f(CW\*(C`version\-id\*(C'\fR,
\&\f(CW\*(C`variant\*(C'\fR and \f(CW\*(C`variant\-id\*(C'\fR follow the definition specified in \fBos\-release\fR\|(5).
Refer to the manual page for exact description of the fields. Their values
are taken from the os-release file. If the file is not present in the system,
or the values are not present in the file, the fields are not included.
.PP
On Windows the values are filled from information gathered from the system.
.PP
\&\fBSince:\fR
2.10
.PP
\&\fBguest-get-osinfo\fR  (Command)
Retrieve guest operating system information
.PP
\&\fBReturns:\fR
\&\f(CW\*(C`GuestOSInfo\*(C'\fR
.PP
\&\fBSince:\fR
2.10
