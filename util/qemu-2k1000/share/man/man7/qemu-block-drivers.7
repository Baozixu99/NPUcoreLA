.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "QEMU-BLOCK-DRIVERS.7 7"
.TH QEMU-BLOCK-DRIVERS.7 7 "2024-01-31" " " " "
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
qemu\-block\-drivers \- QEMU block drivers reference
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\s-1QEMU\s0 block driver reference manual
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\fIDisk image file formats\fR
.IX Subsection "Disk image file formats"
.PP
\&\s-1QEMU\s0 supports many image file formats that can be used with VMs as well as with
any of the tools (like \f(CW\*(C`qemu\-img\*(C'\fR). This includes the preferred formats
raw and qcow2 as well as formats that are supported for compatibility with
older \s-1QEMU\s0 versions or other hypervisors.
.PP
Depending on the image format, different options can be passed to
\&\f(CW\*(C`qemu\-img create\*(C'\fR and \f(CW\*(C`qemu\-img convert\*(C'\fR using the \f(CW\*(C`\-o\*(C'\fR option.
This section describes each format and the options that are supported for it.
.IP "\fBraw\fR" 4
.IX Item "raw"
Raw disk image format. This format has the advantage of
being simple and easily exportable to all other emulators. If your
file system supports \fIholes\fR (for example in ext2 or ext3 on
Linux or \s-1NTFS\s0 on Windows), then only the written sectors will reserve
space. Use \f(CW\*(C`qemu\-img info\*(C'\fR to know the real size used by the
image or \f(CW\*(C`ls \-ls\*(C'\fR on Unix/Linux.
.Sp
Supported options:
.RS 4
.ie n .IP """preallocation""" 4
.el .IP "\f(CWpreallocation\fR" 4
.IX Item "preallocation"
Preallocation mode (allowed values: \f(CW\*(C`off\*(C'\fR, \f(CW\*(C`falloc\*(C'\fR, \f(CW\*(C`full\*(C'\fR).
\&\f(CW\*(C`falloc\*(C'\fR mode preallocates space for image by calling \fBposix_fallocate()\fR.
\&\f(CW\*(C`full\*(C'\fR mode preallocates space for image by writing zeros to underlying
storage.
.RE
.RS 4
.RE
.IP "\fBqcow2\fR" 4
.IX Item "qcow2"
\&\s-1QEMU\s0 image format, the most versatile format. Use it to have smaller
images (useful if your filesystem does not supports holes, for example
on Windows), zlib based compression and support of multiple \s-1VM\s0
snapshots.
.Sp
Supported options:
.RS 4
.ie n .IP """compat""" 4
.el .IP "\f(CWcompat\fR" 4
.IX Item "compat"
Determines the qcow2 version to use. \f(CW\*(C`compat=0.10\*(C'\fR uses the
traditional image format that can be read by any \s-1QEMU\s0 since 0.10.
\&\f(CW\*(C`compat=1.1\*(C'\fR enables image format extensions that only \s-1QEMU 1.1\s0 and
newer understand (this is the default). Amongst others, this includes
zero clusters, which allow efficient copy-on-read for sparse images.
.ie n .IP """backing_file""" 4
.el .IP "\f(CWbacking_file\fR" 4
.IX Item "backing_file"
File name of a base image (see \fBcreate\fR subcommand)
.ie n .IP """backing_fmt""" 4
.el .IP "\f(CWbacking_fmt\fR" 4
.IX Item "backing_fmt"
Image format of the base image
.ie n .IP """encryption""" 4
.el .IP "\f(CWencryption\fR" 4
.IX Item "encryption"
This option is deprecated and equivalent to \f(CW\*(C`encrypt.format=aes\*(C'\fR
.ie n .IP """encrypt.format""" 4
.el .IP "\f(CWencrypt.format\fR" 4
.IX Item "encrypt.format"
If this is set to \f(CW\*(C`luks\*(C'\fR, it requests that the qcow2 payload (not
qcow2 header) be encrypted using the \s-1LUKS\s0 format. The passphrase to
use to unlock the \s-1LUKS\s0 key slot is given by the \f(CW\*(C`encrypt.key\-secret\*(C'\fR
parameter. \s-1LUKS\s0 encryption parameters can be tuned with the other
\&\f(CW\*(C`encrypt.*\*(C'\fR parameters.
.Sp
If this is set to \f(CW\*(C`aes\*(C'\fR, the image is encrypted with 128\-bit AES-CBC.
The encryption key is given by the \f(CW\*(C`encrypt.key\-secret\*(C'\fR parameter.
This encryption format is considered to be flawed by modern cryptography
standards, suffering from a number of design problems:
.RS 4
.IP "\-<The AES-CBC cipher is used with predictable initialization vectors based>" 4
.IX Item "-<The AES-CBC cipher is used with predictable initialization vectors based>"
on the sector number. This makes it vulnerable to chosen plaintext attacks
which can reveal the existence of encrypted data.
.IP "\-<The user passphrase is directly used as the encryption key. A poorly>" 4
.IX Item "-<The user passphrase is directly used as the encryption key. A poorly>"
chosen or short passphrase will compromise the security of the encryption.
.IP "\-<In the event of the passphrase being compromised there is no way to>" 4
.IX Item "-<In the event of the passphrase being compromised there is no way to>"
change the passphrase to protect data in any qcow images. The files must
be cloned, using a different encryption passphrase in the new file. The
original file must then be securely erased using a program like shred,
though even this is ineffective with many modern storage technologies.
.RE
.RS 4
.Sp
The use of this is no longer supported in system emulators. Support only
remains in the command line utilities, for the purposes of data liberation
and interoperability with old versions of \s-1QEMU.\s0 The \f(CW\*(C`luks\*(C'\fR format
should be used instead.
.RE
.ie n .IP """encrypt.key\-secret""" 4
.el .IP "\f(CWencrypt.key\-secret\fR" 4
.IX Item "encrypt.key-secret"
Provides the \s-1ID\s0 of a \f(CW\*(C`secret\*(C'\fR object that contains the passphrase
(\f(CW\*(C`encrypt.format=luks\*(C'\fR) or encryption key (\f(CW\*(C`encrypt.format=aes\*(C'\fR).
.ie n .IP """encrypt.cipher\-alg""" 4
.el .IP "\f(CWencrypt.cipher\-alg\fR" 4
.IX Item "encrypt.cipher-alg"
Name of the cipher algorithm and key length. Currently defaults
to \f(CW\*(C`aes\-256\*(C'\fR. Only used when \f(CW\*(C`encrypt.format=luks\*(C'\fR.
.ie n .IP """encrypt.cipher\-mode""" 4
.el .IP "\f(CWencrypt.cipher\-mode\fR" 4
.IX Item "encrypt.cipher-mode"
Name of the encryption mode to use. Currently defaults to \f(CW\*(C`xts\*(C'\fR.
Only used when \f(CW\*(C`encrypt.format=luks\*(C'\fR.
.ie n .IP """encrypt.ivgen\-alg""" 4
.el .IP "\f(CWencrypt.ivgen\-alg\fR" 4
.IX Item "encrypt.ivgen-alg"
Name of the initialization vector generator algorithm. Currently defaults
to \f(CW\*(C`plain64\*(C'\fR. Only used when \f(CW\*(C`encrypt.format=luks\*(C'\fR.
.ie n .IP """encrypt.ivgen\-hash\-alg""" 4
.el .IP "\f(CWencrypt.ivgen\-hash\-alg\fR" 4
.IX Item "encrypt.ivgen-hash-alg"
Name of the hash algorithm to use with the initialization vector generator
(if required). Defaults to \f(CW\*(C`sha256\*(C'\fR. Only used when \f(CW\*(C`encrypt.format=luks\*(C'\fR.
.ie n .IP """encrypt.hash\-alg""" 4
.el .IP "\f(CWencrypt.hash\-alg\fR" 4
.IX Item "encrypt.hash-alg"
Name of the hash algorithm to use for \s-1PBKDF\s0 algorithm
Defaults to \f(CW\*(C`sha256\*(C'\fR. Only used when \f(CW\*(C`encrypt.format=luks\*(C'\fR.
.ie n .IP """encrypt.iter\-time""" 4
.el .IP "\f(CWencrypt.iter\-time\fR" 4
.IX Item "encrypt.iter-time"
Amount of time, in milliseconds, to use for \s-1PBKDF\s0 algorithm per key slot.
Defaults to \f(CW2000\fR. Only used when \f(CW\*(C`encrypt.format=luks\*(C'\fR.
.ie n .IP """cluster_size""" 4
.el .IP "\f(CWcluster_size\fR" 4
.IX Item "cluster_size"
Changes the qcow2 cluster size (must be between 512 and 2M). Smaller cluster
sizes can improve the image file size whereas larger cluster sizes generally
provide better performance.
.ie n .IP """preallocation""" 4
.el .IP "\f(CWpreallocation\fR" 4
.IX Item "preallocation"
Preallocation mode (allowed values: \f(CW\*(C`off\*(C'\fR, \f(CW\*(C`metadata\*(C'\fR, \f(CW\*(C`falloc\*(C'\fR,
\&\f(CW\*(C`full\*(C'\fR). An image with preallocated metadata is initially larger but can
improve performance when the image needs to grow. \f(CW\*(C`falloc\*(C'\fR and \f(CW\*(C`full\*(C'\fR
preallocations are like the same options of \f(CW\*(C`raw\*(C'\fR format, but sets up
metadata also.
.ie n .IP """lazy_refcounts""" 4
.el .IP "\f(CWlazy_refcounts\fR" 4
.IX Item "lazy_refcounts"
If this option is set to \f(CW\*(C`on\*(C'\fR, reference count updates are postponed with
the goal of avoiding metadata I/O and improving performance. This is
particularly interesting with \fBcache=writethrough\fR which doesn't batch
metadata updates. The tradeoff is that after a host crash, the reference count
tables must be rebuilt, i.e. on the next open an (automatic) \f(CW\*(C`qemu\-img
check \-r all\*(C'\fR is required, which may take some time.
.Sp
This option can only be enabled if \f(CW\*(C`compat=1.1\*(C'\fR is specified.
.ie n .IP """nocow""" 4
.el .IP "\f(CWnocow\fR" 4
.IX Item "nocow"
If this option is set to \f(CW\*(C`on\*(C'\fR, it will turn off \s-1COW\s0 of the file. It's only
valid on btrfs, no effect on other file systems.
.Sp
Btrfs has low performance when hosting a \s-1VM\s0 image file, even more when the guest
on the \s-1VM\s0 also using btrfs as file system. Turning off \s-1COW\s0 is a way to mitigate
this bad performance. Generally there are two ways to turn off \s-1COW\s0 on btrfs:
a) Disable it by mounting with nodatacow, then all newly created files will be
\&\s-1NOCOW.\s0 b) For an empty file, add the \s-1NOCOW\s0 file attribute. That's what this option
does.
.Sp
Note: this option is only valid to new or empty files. If there is an existing
file which is \s-1COW\s0 and has data blocks already, it couldn't be changed to \s-1NOCOW\s0
by setting \f(CW\*(C`nocow=on\*(C'\fR. One can issue \f(CW\*(C`lsattr filename\*(C'\fR to check if
the \s-1NOCOW\s0 flag is set or not (Capital 'C' is \s-1NOCOW\s0 flag).
.RE
.RS 4
.RE
.IP "\fBqed\fR" 4
.IX Item "qed"
Old \s-1QEMU\s0 image format with support for backing files and compact image files
(when your filesystem or transport medium does not support holes).
.Sp
When converting \s-1QED\s0 images to qcow2, you might want to consider using the
\&\f(CW\*(C`lazy_refcounts=on\*(C'\fR option to get a more QED-like behaviour.
.Sp
Supported options:
.RS 4
.ie n .IP """backing_file""" 4
.el .IP "\f(CWbacking_file\fR" 4
.IX Item "backing_file"
File name of a base image (see \fBcreate\fR subcommand).
.ie n .IP """backing_fmt""" 4
.el .IP "\f(CWbacking_fmt\fR" 4
.IX Item "backing_fmt"
Image file format of backing file (optional).  Useful if the format cannot be
autodetected because it has no header, like some vhd/vpc files.
.ie n .IP """cluster_size""" 4
.el .IP "\f(CWcluster_size\fR" 4
.IX Item "cluster_size"
Changes the cluster size (must be power\-of\-2 between 4K and 64K). Smaller
cluster sizes can improve the image file size whereas larger cluster sizes
generally provide better performance.
.ie n .IP """table_size""" 4
.el .IP "\f(CWtable_size\fR" 4
.IX Item "table_size"
Changes the number of clusters per L1/L2 table (must be power\-of\-2 between 1
and 16).  There is normally no need to change this value but this option can be
used for performance benchmarking.
.RE
.RS 4
.RE
.IP "\fBqcow\fR" 4
.IX Item "qcow"
Old \s-1QEMU\s0 image format with support for backing files, compact image files,
encryption and compression.
.Sp
Supported options:
.RS 4
.ie n .IP """backing_file""" 4
.el .IP "\f(CWbacking_file\fR" 4
.IX Item "backing_file"
File name of a base image (see \fBcreate\fR subcommand)
.ie n .IP """encryption""" 4
.el .IP "\f(CWencryption\fR" 4
.IX Item "encryption"
This option is deprecated and equivalent to \f(CW\*(C`encrypt.format=aes\*(C'\fR
.ie n .IP """encrypt.format""" 4
.el .IP "\f(CWencrypt.format\fR" 4
.IX Item "encrypt.format"
If this is set to \f(CW\*(C`aes\*(C'\fR, the image is encrypted with 128\-bit AES-CBC.
The encryption key is given by the \f(CW\*(C`encrypt.key\-secret\*(C'\fR parameter.
This encryption format is considered to be flawed by modern cryptography
standards, suffering from a number of design problems enumerated previously
against the \f(CW\*(C`qcow2\*(C'\fR image format.
.Sp
The use of this is no longer supported in system emulators. Support only
remains in the command line utilities, for the purposes of data liberation
and interoperability with old versions of \s-1QEMU.\s0
.Sp
Users requiring native encryption should use the \f(CW\*(C`qcow2\*(C'\fR format
instead with \f(CW\*(C`encrypt.format=luks\*(C'\fR.
.ie n .IP """encrypt.key\-secret""" 4
.el .IP "\f(CWencrypt.key\-secret\fR" 4
.IX Item "encrypt.key-secret"
Provides the \s-1ID\s0 of a \f(CW\*(C`secret\*(C'\fR object that contains the encryption
key (\f(CW\*(C`encrypt.format=aes\*(C'\fR).
.RE
.RS 4
.RE
.IP "\fBluks\fR" 4
.IX Item "luks"
\&\s-1LUKS\s0 v1 encryption format, compatible with Linux dm\-crypt/cryptsetup
.Sp
Supported options:
.RS 4
.ie n .IP """key\-secret""" 4
.el .IP "\f(CWkey\-secret\fR" 4
.IX Item "key-secret"
Provides the \s-1ID\s0 of a \f(CW\*(C`secret\*(C'\fR object that contains the passphrase.
.ie n .IP """cipher\-alg""" 4
.el .IP "\f(CWcipher\-alg\fR" 4
.IX Item "cipher-alg"
Name of the cipher algorithm and key length. Currently defaults
to \f(CW\*(C`aes\-256\*(C'\fR.
.ie n .IP """cipher\-mode""" 4
.el .IP "\f(CWcipher\-mode\fR" 4
.IX Item "cipher-mode"
Name of the encryption mode to use. Currently defaults to \f(CW\*(C`xts\*(C'\fR.
.ie n .IP """ivgen\-alg""" 4
.el .IP "\f(CWivgen\-alg\fR" 4
.IX Item "ivgen-alg"
Name of the initialization vector generator algorithm. Currently defaults
to \f(CW\*(C`plain64\*(C'\fR.
.ie n .IP """ivgen\-hash\-alg""" 4
.el .IP "\f(CWivgen\-hash\-alg\fR" 4
.IX Item "ivgen-hash-alg"
Name of the hash algorithm to use with the initialization vector generator
(if required). Defaults to \f(CW\*(C`sha256\*(C'\fR.
.ie n .IP """hash\-alg""" 4
.el .IP "\f(CWhash\-alg\fR" 4
.IX Item "hash-alg"
Name of the hash algorithm to use for \s-1PBKDF\s0 algorithm
Defaults to \f(CW\*(C`sha256\*(C'\fR.
.ie n .IP """iter\-time""" 4
.el .IP "\f(CWiter\-time\fR" 4
.IX Item "iter-time"
Amount of time, in milliseconds, to use for \s-1PBKDF\s0 algorithm per key slot.
Defaults to \f(CW2000\fR.
.RE
.RS 4
.RE
.IP "\fBvdi\fR" 4
.IX Item "vdi"
VirtualBox 1.1 compatible image format.
Supported options:
.RS 4
.ie n .IP """static""" 4
.el .IP "\f(CWstatic\fR" 4
.IX Item "static"
If this option is set to \f(CW\*(C`on\*(C'\fR, the image is created with metadata
preallocation.
.RE
.RS 4
.RE
.IP "\fBvmdk\fR" 4
.IX Item "vmdk"
VMware 3 and 4 compatible image format.
.Sp
Supported options:
.RS 4
.ie n .IP """backing_file""" 4
.el .IP "\f(CWbacking_file\fR" 4
.IX Item "backing_file"
File name of a base image (see \fBcreate\fR subcommand).
.ie n .IP """compat6""" 4
.el .IP "\f(CWcompat6\fR" 4
.IX Item "compat6"
Create a \s-1VMDK\s0 version 6 image (instead of version 4)
.ie n .IP """hwversion""" 4
.el .IP "\f(CWhwversion\fR" 4
.IX Item "hwversion"
Specify vmdk virtual hardware version. Compat6 flag cannot be enabled
if hwversion is specified.
.ie n .IP """subformat""" 4
.el .IP "\f(CWsubformat\fR" 4
.IX Item "subformat"
Specifies which \s-1VMDK\s0 subformat to use. Valid options are
\&\f(CW\*(C`monolithicSparse\*(C'\fR (default),
\&\f(CW\*(C`monolithicFlat\*(C'\fR,
\&\f(CW\*(C`twoGbMaxExtentSparse\*(C'\fR,
\&\f(CW\*(C`twoGbMaxExtentFlat\*(C'\fR and
\&\f(CW\*(C`streamOptimized\*(C'\fR.
.RE
.RS 4
.RE
.IP "\fBvpc\fR" 4
.IX Item "vpc"
VirtualPC compatible image format (\s-1VHD\s0).
Supported options:
.RS 4
.ie n .IP """subformat""" 4
.el .IP "\f(CWsubformat\fR" 4
.IX Item "subformat"
Specifies which \s-1VHD\s0 subformat to use. Valid options are
\&\f(CW\*(C`dynamic\*(C'\fR (default) and \f(CW\*(C`fixed\*(C'\fR.
.RE
.RS 4
.RE
.IP "\fB\s-1VHDX\s0\fR" 4
.IX Item "VHDX"
Hyper-V compatible image format (\s-1VHDX\s0).
Supported options:
.RS 4
.ie n .IP """subformat""" 4
.el .IP "\f(CWsubformat\fR" 4
.IX Item "subformat"
Specifies which \s-1VHDX\s0 subformat to use. Valid options are
\&\f(CW\*(C`dynamic\*(C'\fR (default) and \f(CW\*(C`fixed\*(C'\fR.
.ie n .IP """block_state_zero""" 4
.el .IP "\f(CWblock_state_zero\fR" 4
.IX Item "block_state_zero"
Force use of payload blocks of type '\s-1ZERO\s0'.  Can be set to \f(CW\*(C`on\*(C'\fR (default)
or \f(CW\*(C`off\*(C'\fR.  When set to \f(CW\*(C`off\*(C'\fR, new blocks will be created as
\&\f(CW\*(C`PAYLOAD_BLOCK_NOT_PRESENT\*(C'\fR, which means parsers are free to return
arbitrary data for those blocks.  Do not set to \f(CW\*(C`off\*(C'\fR when using
\&\f(CW\*(C`qemu\-img convert\*(C'\fR with \f(CW\*(C`subformat=dynamic\*(C'\fR.
.ie n .IP """block_size""" 4
.el .IP "\f(CWblock_size\fR" 4
.IX Item "block_size"
Block size; min 1 \s-1MB,\s0 max 256 \s-1MB.\s0  0 means auto-calculate based on image size.
.ie n .IP """log_size""" 4
.el .IP "\f(CWlog_size\fR" 4
.IX Item "log_size"
Log size; min 1 \s-1MB.\s0
.RE
.RS 4
.RE
.PP
Read-only formats
.IX Subsection "Read-only formats"
.PP
More disk image file formats are supported in a read-only mode.
.IP "\fBbochs\fR" 4
.IX Item "bochs"
Bochs images of \f(CW\*(C`growing\*(C'\fR type.
.IP "\fBcloop\fR" 4
.IX Item "cloop"
Linux Compressed Loop image, useful only to reuse directly compressed
CD-ROM images present for example in the Knoppix CD-ROMs.
.IP "\fBdmg\fR" 4
.IX Item "dmg"
Apple disk image.
.IP "\fBparallels\fR" 4
.IX Item "parallels"
Parallels disk image format.
.PP
\fIUsing host drives\fR
.IX Subsection "Using host drives"
.PP
In addition to disk image files, \s-1QEMU\s0 can directly access host
devices. We describe here the usage for \s-1QEMU\s0 version >= 0.8.3.
.PP
Linux
.IX Subsection "Linux"
.PP
On Linux, you can directly use the host device filename instead of a
disk image filename provided you have enough privileges to access
it. For example, use \fI/dev/cdrom\fR to access to the \s-1CDROM.\s0
.ie n .IP """CD""" 4
.el .IP "\f(CWCD\fR" 4
.IX Item "CD"
You can specify a \s-1CDROM\s0 device even if no \s-1CDROM\s0 is loaded. \s-1QEMU\s0 has
specific code to detect \s-1CDROM\s0 insertion or removal. \s-1CDROM\s0 ejection by
the guest \s-1OS\s0 is supported. Currently only data CDs are supported.
.ie n .IP """Floppy""" 4
.el .IP "\f(CWFloppy\fR" 4
.IX Item "Floppy"
You can specify a floppy device even if no floppy is loaded. Floppy
removal is currently not detected accurately (if you change floppy
without doing floppy access while the floppy is not loaded, the guest
\&\s-1OS\s0 will think that the same floppy is loaded).
Use of the host's floppy device is deprecated, and support for it will
be removed in a future release.
.ie n .IP """Hard disks""" 4
.el .IP "\f(CWHard disks\fR" 4
.IX Item "Hard disks"
Hard disks can be used. Normally you must specify the whole disk
(\fI/dev/hdb\fR instead of \fI/dev/hdb1\fR) so that the guest \s-1OS\s0 can
see it as a partitioned disk. \s-1WARNING:\s0 unless you know what you do, it
is better to only make READ-ONLY accesses to the hard disk otherwise
you may corrupt your host data (use the \fB\-snapshot\fR command
line option or modify the device permissions accordingly).
.PP
Windows
.IX Subsection "Windows"
.ie n .IP """CD""" 4
.el .IP "\f(CWCD\fR" 4
.IX Item "CD"
The preferred syntax is the drive letter (e.g. \fId:\fR). The
alternate syntax \fI\e\e.\ed:\fR is supported. \fI/dev/cdrom\fR is
supported as an alias to the first \s-1CDROM\s0 drive.
.Sp
Currently there is no specific code to handle removable media, so it
is better to use the \f(CW\*(C`change\*(C'\fR or \f(CW\*(C`eject\*(C'\fR monitor commands to
change or eject media.
.ie n .IP """Hard disks""" 4
.el .IP "\f(CWHard disks\fR" 4
.IX Item "Hard disks"
Hard disks can be used with the syntax: \fI\e\e.\ePhysicalDrive\fIN\fI\fR
where \fIN\fR is the drive number (0 is the first hard disk).
.Sp
\&\s-1WARNING:\s0 unless you know what you do, it is better to only make
READ-ONLY accesses to the hard disk otherwise you may corrupt your
host data (use the \fB\-snapshot\fR command line so that the
modifications are written in a temporary file).
.PP
Mac \s-1OS X\s0
.IX Subsection "Mac OS X"
.PP
\&\fI/dev/cdrom\fR is an alias to the first \s-1CDROM.\s0
.PP
Currently there is no specific code to handle removable media, so it
is better to use the \f(CW\*(C`change\*(C'\fR or \f(CW\*(C`eject\*(C'\fR monitor commands to
change or eject media.
.PP
\fIVirtual \s-1FAT\s0 disk images\fR
.IX Subsection "Virtual FAT disk images"
.PP
\&\s-1QEMU\s0 can automatically create a virtual \s-1FAT\s0 disk image from a
directory tree. In order to use it, just type:
.PP
.Vb 1
\&        qemu\-system\-i386 linux.img \-hdb fat:/my_directory
.Ve
.PP
Then you access access to all the files in the \fI/my_directory\fR
directory without having to copy them in a disk image or to export
them via \s-1SAMBA\s0 or \s-1NFS.\s0 The default access is \fIread-only\fR.
.PP
Floppies can be emulated with the \f(CW\*(C`:floppy:\*(C'\fR option:
.PP
.Vb 1
\&        qemu\-system\-i386 linux.img \-fda fat:floppy:/my_directory
.Ve
.PP
A read/write support is available for testing (beta stage) with the
\&\f(CW\*(C`:rw:\*(C'\fR option:
.PP
.Vb 1
\&        qemu\-system\-i386 linux.img \-fda fat:floppy:rw:/my_directory
.Ve
.PP
What you should \fInever\fR do:
.IP "*<use non-ASCII filenames ;>" 4
.IX Item "*<use non-ASCII filenames ;>"
.PD 0
.ie n .IP "*<use ""\-snapshot"" together with "":rw:"" ;>" 4
.el .IP "*<use ``\-snapshot'' together with ``:rw:'' ;>" 4
.IX Item "*<use -snapshot together with :rw: ;>"
.IP "*<expect it to work when loadvm'ing ;>" 4
.IX Item "*<expect it to work when loadvm'ing ;>"
.IP "*<write to the \s-1FAT\s0 directory on the host system while accessing it with the guest system.>" 4
.IX Item "*<write to the FAT directory on the host system while accessing it with the guest system.>"
.PD
.PP
\fI\s-1NBD\s0 access\fR
.IX Subsection "NBD access"
.PP
\&\s-1QEMU\s0 can access directly to block device exported using the Network Block Device
protocol.
.PP
.Vb 1
\&        qemu\-system\-i386 linux.img \-hdb nbd://my_nbd_server.mydomain.org:1024/
.Ve
.PP
If the \s-1NBD\s0 server is located on the same host, you can use an unix socket instead
of an inet socket:
.PP
.Vb 1
\&        qemu\-system\-i386 linux.img \-hdb nbd+unix://?socket=/tmp/my_socket
.Ve
.PP
In this case, the block device must be exported using qemu-nbd:
.PP
.Vb 1
\&        qemu\-nbd \-\-socket=/tmp/my_socket my_disk.qcow2
.Ve
.PP
The use of qemu-nbd allows sharing of a disk between several guests:
.PP
.Vb 1
\&        qemu\-nbd \-\-socket=/tmp/my_socket \-\-share=2 my_disk.qcow2
.Ve
.PP
and then you can use it with two guests:
.PP
.Vb 2
\&        qemu\-system\-i386 linux1.img \-hdb nbd+unix://?socket=/tmp/my_socket
\&        qemu\-system\-i386 linux2.img \-hdb nbd+unix://?socket=/tmp/my_socket
.Ve
.PP
If the nbd-server uses named exports (supported since \s-1NBD 2.9.18,\s0 or with \s-1QEMU\s0's
own embedded \s-1NBD\s0 server), you must specify an export name in the \s-1URI:\s0
.PP
.Vb 2
\&        qemu\-system\-i386 \-cdrom nbd://localhost/debian\-500\-ppc\-netinst
\&        qemu\-system\-i386 \-cdrom nbd://localhost/openSUSE\-11.1\-ppc\-netinst
.Ve
.PP
The \s-1URI\s0 syntax for \s-1NBD\s0 is supported since \s-1QEMU 1.3.\s0  An alternative syntax is
also available.  Here are some example of the older syntax:
.PP
.Vb 3
\&        qemu\-system\-i386 linux.img \-hdb nbd:my_nbd_server.mydomain.org:1024
\&        qemu\-system\-i386 linux2.img \-hdb nbd:unix:/tmp/my_socket
\&        qemu\-system\-i386 \-cdrom nbd:localhost:10809:exportname=debian\-500\-ppc\-netinst
.Ve
.PP
\fISheepdog disk images\fR
.IX Subsection "Sheepdog disk images"
.PP
Sheepdog is a distributed storage system for \s-1QEMU.\s0  It provides highly
available block level storage volumes that can be attached to
QEMU-based virtual machines.
.PP
You can create a Sheepdog disk image with the command:
.PP
.Vb 1
\&        qemu\-img create sheepdog:///<image> <size>
.Ve
.PP
where \fIimage\fR is the Sheepdog image name and \fIsize\fR is its
size.
.PP
To import the existing \fIfilename\fR to Sheepdog, you can use a
convert command.
.PP
.Vb 1
\&        qemu\-img convert <filename> sheepdog:///<image>
.Ve
.PP
You can boot from the Sheepdog disk image with the command:
.PP
.Vb 1
\&        qemu\-system\-i386 sheepdog:///<image>
.Ve
.PP
You can also create a snapshot of the Sheepdog image like qcow2.
.PP
.Vb 1
\&        qemu\-img snapshot \-c <tag> sheepdog:///<image>
.Ve
.PP
where \fItag\fR is a tag name of the newly created snapshot.
.PP
To boot from the Sheepdog snapshot, specify the tag name of the
snapshot.
.PP
.Vb 1
\&        qemu\-system\-i386 sheepdog:///<image>#<tag>
.Ve
.PP
You can create a cloned image from the existing snapshot.
.PP
.Vb 1
\&        qemu\-img create \-b sheepdog:///<base>#<tag> sheepdog:///<image>
.Ve
.PP
where \fIbase\fR is an image name of the source snapshot and \fItag\fR
is its tag name.
.PP
You can use an unix socket instead of an inet socket:
.PP
.Vb 1
\&        qemu\-system\-i386 sheepdog+unix:///<image>?socket=<path>
.Ve
.PP
If the Sheepdog daemon doesn't run on the local host, you need to
specify one of the Sheepdog servers to connect to.
.PP
.Vb 2
\&        qemu\-img create sheepdog://<hostname>:<port>/<image> <size>
\&        qemu\-system\-i386 sheepdog://<hostname>:<port>/<image>
.Ve
.PP
\fIiSCSI LUNs\fR
.IX Subsection "iSCSI LUNs"
.PP
iSCSI is a popular protocol used to access \s-1SCSI\s0 devices across a computer
network.
.PP
There are two different ways iSCSI devices can be used by \s-1QEMU.\s0
.PP
The first method is to mount the iSCSI \s-1LUN\s0 on the host, and make it appear as
any other ordinary \s-1SCSI\s0 device on the host and then to access this device as a
/dev/sd device from \s-1QEMU.\s0 How to do this differs between host OSes.
.PP
The second method involves using the iSCSI initiator that is built into
\&\s-1QEMU.\s0 This provides a mechanism that works the same way regardless of which
host \s-1OS\s0 you are running \s-1QEMU\s0 on. This section will describe this second method
of using iSCSI together with \s-1QEMU.\s0
.PP
In \s-1QEMU,\s0 iSCSI devices are described using special iSCSI URLs
.PP
.Vb 2
\&        URL syntax:
\&        iscsi://[<username>[%<password>]@]<host>[:<port>]/<target\-iqn\-name>/<lun>
.Ve
.PP
Username and password are optional and only used if your target is set up
using \s-1CHAP\s0 authentication for access control.
Alternatively the username and password can also be set via environment
variables to have these not show up in the process list
.PP
.Vb 3
\&        export LIBISCSI_CHAP_USERNAME=<username>
\&        export LIBISCSI_CHAP_PASSWORD=<password>
\&        iscsi://<host>/<target\-iqn\-name>/<lun>
.Ve
.PP
Various session related parameters can be set via special options, either
in a configuration file provided via '\-readconfig' or directly on the
command line.
.PP
If the initiator-name is not specified qemu will use a default name
of 'iqn.2008\-11.org.linux\-kvm[:<uuid>'] where <uuid> is the \s-1UUID\s0 of the
virtual machine. If the \s-1UUID\s0 is not specified qemu will use
\&'iqn.2008\-11.org.linux\-kvm[:<name>'] where <name> is the name of the
virtual machine.
.PP
.Vb 2
\&        Setting a specific initiator name to use when logging in to the target
\&        \-iscsi initiator\-name=iqn.qemu.test:my\-initiator
\&
\&
\&        
\&        Controlling which type of header digest to negotiate with the target
\&        \-iscsi header\-digest=CRC32C|CRC32C\-NONE|NONE\-CRC32C|NONE
.Ve
.PP
These can also be set via a configuration file
.PP
.Vb 6
\&        [iscsi]
\&          user = "CHAP username"
\&          password = "CHAP password"
\&          initiator\-name = "iqn.qemu.test:my\-initiator"
\&          # header digest is one of CRC32C|CRC32C\-NONE|NONE\-CRC32C|NONE
\&          header\-digest = "CRC32C"
.Ve
.PP
Setting the target name allows different options for different targets
.PP
.Vb 6
\&        [iscsi "iqn.target.name"]
\&          user = "CHAP username"
\&          password = "CHAP password"
\&          initiator\-name = "iqn.qemu.test:my\-initiator"
\&          # header digest is one of CRC32C|CRC32C\-NONE|NONE\-CRC32C|NONE
\&          header\-digest = "CRC32C"
.Ve
.PP
Howto use a configuration file to set iSCSI configuration options:
.PP
.Vb 7
\&        cat >iscsi.conf <<EOF
\&        [iscsi]
\&          user = "me"
\&          password = "my password"
\&          initiator\-name = "iqn.qemu.test:my\-initiator"
\&          header\-digest = "CRC32C"
\&        EOF
\&        
\&        qemu\-system\-i386 \-drive file=iscsi://127.0.0.1/iqn.qemu.test/1 \e
\&            \-readconfig iscsi.conf
.Ve
.PP
Howto set up a simple iSCSI target on loopback and accessing it via \s-1QEMU:\s0
.PP
.Vb 3
\&        This example shows how to set up an iSCSI target with one CDROM and one DISK
\&        using the Linux STGT software target. This target is available on Red Hat based
\&        systems as the package \*(Aqscsi\-target\-utils\*(Aq.
\&        
\&        tgtd \-\-iscsi portal=127.0.0.1:3260
\&        tgtadm \-\-lld iscsi \-\-op new \-\-mode target \-\-tid 1 \-T iqn.qemu.test
\&        tgtadm \-\-lld iscsi \-\-mode logicalunit \-\-op new \-\-tid 1 \-\-lun 1 \e
\&            \-b /IMAGES/disk.img \-\-device\-type=disk
\&        tgtadm \-\-lld iscsi \-\-mode logicalunit \-\-op new \-\-tid 1 \-\-lun 2 \e
\&            \-b /IMAGES/cd.iso \-\-device\-type=cd
\&        tgtadm \-\-lld iscsi \-\-op bind \-\-mode target \-\-tid 1 \-I ALL
\&        
\&        qemu\-system\-i386 \-iscsi initiator\-name=iqn.qemu.test:my\-initiator \e
\&            \-boot d \-drive file=iscsi://127.0.0.1/iqn.qemu.test/1 \e
\&            \-cdrom iscsi://127.0.0.1/iqn.qemu.test/2
.Ve
.PP
\fIGlusterFS disk images\fR
.IX Subsection "GlusterFS disk images"
.PP
GlusterFS is a user space distributed file system.
.PP
You can boot from the GlusterFS disk image with the command:
.PP
.Vb 3
\&        URI:
\&        qemu\-system\-x86_64 \-drive file=gluster[+<type>]://[<host>[:<port>]]/<volume>/<path>
\&                                       [?socket=...][,file.debug=9][,file.logfile=...]
\&        
\&        JSON:
\&        qemu\-system\-x86_64 \*(Aqjson:{"driver":"qcow2",
\&                                   "file":{"driver":"gluster",
\&                                            "volume":"testvol","path":"a.img","debug":9,"logfile":"...",
\&                                            "server":[{"type":"tcp","host":"...","port":"..."},
\&                                                      {"type":"unix","socket":"..."}]}}\*(Aq
.Ve
.PP
\&\fIgluster\fR is the protocol.
.PP
\&\fItype\fR specifies the transport type used to connect to gluster
management daemon (glusterd). Valid transport types are
tcp and unix. In the \s-1URI\s0 form, if a transport type isn't specified,
then tcp type is assumed.
.PP
\&\fIhost\fR specifies the server where the volume file specification for
the given volume resides. This can be either a hostname or an ipv4 address.
If transport type is unix, then \fIhost\fR field should not be specified.
Instead \fIsocket\fR field needs to be populated with the path to unix domain
socket.
.PP
\&\fIport\fR is the port number on which glusterd is listening. This is optional
and if not specified, it defaults to port 24007. If the transport type is unix,
then \fIport\fR should not be specified.
.PP
\&\fIvolume\fR is the name of the gluster volume which contains the disk image.
.PP
\&\fIpath\fR is the path to the actual disk image that resides on gluster volume.
.PP
\&\fIdebug\fR is the logging level of the gluster protocol driver. Debug levels
are 0\-9, with 9 being the most verbose, and 0 representing no debugging output.
The default level is 4. The current logging levels defined in the gluster source
are 0 \- None, 1 \- Emergency, 2 \- Alert, 3 \- Critical, 4 \- Error, 5 \- Warning,
6 \- Notice, 7 \- Info, 8 \- Debug, 9 \- Trace
.PP
\&\fIlogfile\fR is a commandline option to mention log file path which helps in
logging to the specified file and also help in persisting the gfapi logs. The
default is stderr.
.PP
You can create a GlusterFS disk image with the command:
.PP
.Vb 1
\&        qemu\-img create gluster://<host>/<volume>/<path> <size>
.Ve
.PP
Examples
.PP
.Vb 10
\&        qemu\-system\-x86_64 \-drive file=gluster://1.2.3.4/testvol/a.img
\&        qemu\-system\-x86_64 \-drive file=gluster+tcp://1.2.3.4/testvol/a.img
\&        qemu\-system\-x86_64 \-drive file=gluster+tcp://1.2.3.4:24007/testvol/dir/a.img
\&        qemu\-system\-x86_64 \-drive file=gluster+tcp://[1:2:3:4:5:6:7:8]/testvol/dir/a.img
\&        qemu\-system\-x86_64 \-drive file=gluster+tcp://[1:2:3:4:5:6:7:8]:24007/testvol/dir/a.img
\&        qemu\-system\-x86_64 \-drive file=gluster+tcp://server.domain.com:24007/testvol/dir/a.img
\&        qemu\-system\-x86_64 \-drive file=gluster+unix:///testvol/dir/a.img?socket=/tmp/glusterd.socket
\&        qemu\-system\-x86_64 \-drive file=gluster+rdma://1.2.3.4:24007/testvol/a.img
\&        qemu\-system\-x86_64 \-drive file=gluster://1.2.3.4/testvol/a.img,file.debug=9,file.logfile=/var/log/qemu\-gluster.log
\&        qemu\-system\-x86_64 \*(Aqjson:{"driver":"qcow2",
\&                                   "file":{"driver":"gluster",
\&                                            "volume":"testvol","path":"a.img",
\&                                            "debug":9,"logfile":"/var/log/qemu\-gluster.log",
\&                                            "server":[{"type":"tcp","host":"1.2.3.4","port":24007},
\&                                                      {"type":"unix","socket":"/var/run/glusterd.socket"}]}}\*(Aq
\&        qemu\-system\-x86_64 \-drive driver=qcow2,file.driver=gluster,file.volume=testvol,file.path=/path/a.img,
\&                                               file.debug=9,file.logfile=/var/log/qemu\-gluster.log,
\&                                               file.server.0.type=tcp,file.server.0.host=1.2.3.4,file.server.0.port=24007,
\&                                               file.server.1.type=unix,file.server.1.socket=/var/run/glusterd.socket
.Ve
.PP
\fISecure Shell (ssh) disk images\fR
.IX Subsection "Secure Shell (ssh) disk images"
.PP
You can access disk images located on a remote ssh server
by using the ssh protocol:
.PP
.Vb 1
\&        qemu\-system\-x86_64 \-drive file=ssh://[<user>@]<server>[:<port>]/<path>[?host_key_check=<host_key_check>]
.Ve
.PP
Alternative syntax using properties:
.PP
.Vb 1
\&        qemu\-system\-x86_64 \-drive file.driver=ssh[,file.user=<user>],file.host=<server>[,file.port=<port>],file.path=<path>[,file.host_key_check=<host_key_check>]
.Ve
.PP
\&\fIssh\fR is the protocol.
.PP
\&\fIuser\fR is the remote user.  If not specified, then the local
username is tried.
.PP
\&\fIserver\fR specifies the remote ssh server.  Any ssh server can be
used, but it must implement the sftp-server protocol.  Most Unix/Linux
systems should work without requiring any extra configuration.
.PP
\&\fIport\fR is the port number on which sshd is listening.  By default
the standard ssh port (22) is used.
.PP
\&\fIpath\fR is the path to the disk image.
.PP
The optional \fIhost_key_check\fR parameter controls how the remote
host's key is checked.  The default is \f(CW\*(C`yes\*(C'\fR which means to use
the local \fI.ssh/known_hosts\fR file.  Setting this to \f(CW\*(C`no\*(C'\fR
turns off known-hosts checking.  Or you can check that the host key
matches a specific fingerprint:
\&\f(CW\*(C`host_key_check=md5:78:45:8e:14:57:4f:d5:45:83:0a:0e:f3:49:82:c9:c8\*(C'\fR
(\f(CW\*(C`sha1:\*(C'\fR can also be used as a prefix, but note that OpenSSH
tools only use \s-1MD5\s0 to print fingerprints).
.PP
Currently authentication must be done using ssh-agent.  Other
authentication methods may be supported in future.
.PP
Note: Many ssh servers do not support an \f(CW\*(C`fsync\*(C'\fR\-style operation.
The ssh driver cannot guarantee that disk flush requests are
obeyed, and this causes a risk of disk corruption if the remote
server or network goes down during writes.  The driver will
print a warning when \f(CW\*(C`fsync\*(C'\fR is not supported:
.PP
warning: ssh server \f(CW\*(C`ssh.example.com:22\*(C'\fR does not support fsync
.PP
With sufficiently new versions of libssh2 and OpenSSH, \f(CW\*(C`fsync\*(C'\fR is
supported.
.PP
\fINVMe disk images\fR
.IX Subsection "NVMe disk images"
.PP
\&\s-1NVM\s0 Express (NVMe) storage controllers can be accessed directly by a userspace
driver in \s-1QEMU.\s0  This bypasses the host kernel file system and block layers
while retaining \s-1QEMU\s0 block layer functionalities, such as block jobs, I/O
throttling, image formats, etc.  Disk I/O performance is typically higher than
with \f(CW\*(C`\-drive file=/dev/sda\*(C'\fR using either thread pool or linux-aio.
.PP
The controller will be exclusively used by the \s-1QEMU\s0 process once started. To be
able to share storage between multiple VMs and other applications on the host,
please use the file based protocols.
.PP
Before starting \s-1QEMU,\s0 bind the host NVMe controller to the host vfio-pci
driver.  For example:
.PP
.Vb 5
\&        # modprobe vfio\-pci
\&        # lspci \-n \-s 0000:06:0d.0
\&        06:0d.0 0401: 1102:0002 (rev 08)
\&        # echo 0000:06:0d.0 > /sys/bus/pci/devices/0000:06:0d.0/driver/unbind
\&        # echo 1102 0002 > /sys/bus/pci/drivers/vfio\-pci/new_id
\&        
\&        # qemu\-system\-x86_64 \-drive file=nvme://<host>:<bus>:<slot>.<func>/<namespace>
.Ve
.PP
Alternative syntax using properties:
.PP
.Vb 1
\&        qemu\-system\-x86_64 \-drive file.driver=nvme,file.device=<host>:<bus>:<slot>.<func>,file.namespace=<namespace>
.Ve
.PP
\&\fIhost\fR:\fIbus\fR:\fIslot\fR.\fIfunc\fR is the NVMe controller's \s-1PCI\s0 device
address on the host.
.PP
\&\fInamespace\fR is the NVMe namespace number, starting from 1.
.PP
\fIDisk image file locking\fR
.IX Subsection "Disk image file locking"
.PP
By default, \s-1QEMU\s0 tries to protect image files from unexpected concurrent
access, as long as it's supported by the block protocol driver and host
operating system. If multiple \s-1QEMU\s0 processes (including \s-1QEMU\s0 emulators and
utilities) try to open the same image with conflicting accessing modes, all but
the first one will get an error.
.PP
This feature is currently supported by the file protocol on Linux with the Open
File Descriptor (\s-1OFD\s0) locking \s-1API,\s0 and can be configured to fall back to \s-1POSIX\s0
locking if the \s-1POSIX\s0 host doesn't support Linux \s-1OFD\s0 locking.
.PP
To explicitly enable image locking, specify \*(L"locking=on\*(R" in the file protocol
driver options. If \s-1OFD\s0 locking is not possible, a warning will be printed and
the \s-1POSIX\s0 locking \s-1API\s0 will be used. In this case there is a risk that the lock
will get silently lost when doing hot plugging and block jobs, due to the
shortcomings of the \s-1POSIX\s0 locking \s-1API.\s0
.PP
\&\s-1QEMU\s0 transparently handles lock handover during shared storage migration.  For
shared virtual disk images between multiple VMs, the \*(L"share-rw\*(R" device option
should be used.
.PP
By default, the guest has exclusive write access to its disk image. If the
guest can safely share the disk image with other writers the \f(CW\*(C`\-device
\&...,share\-rw=on\*(C'\fR parameter can be used.  This is only safe if the guest is
running software, such as a cluster file system, that coordinates disk accesses
to avoid corruption.
.PP
Note that share\-rw=on only declares the guest's ability to share the disk.
Some \s-1QEMU\s0 features, such as image file formats, require exclusive write access
to the disk image and this is unaffected by the share\-rw=on option.
.PP
Alternatively, locking can be fully disabled by \*(L"locking=off\*(R" block device
option. In the command line, the option is usually in the form of
\&\*(L"file.locking=off\*(R" as the protocol driver is normally placed as a \*(L"file\*(R" child
under a format driver. For example:
.PP
\&\f(CW\*(C`\-blockdev driver=qcow2,file.filename=/path/to/image,file.locking=off,file.driver=file\*(C'\fR
.PP
To check if image locking is active, check the output of the \*(L"lslocks\*(R" command
on host and see if there are locks held by the \s-1QEMU\s0 process on the image file.
More than one byte could be locked by the \s-1QEMU\s0 instance, each byte of which
reflects a particular permission that is acquired or protected by the running
block driver.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \s-1HTML\s0 documentation of \s-1QEMU\s0 for more precise information and Linux
user mode emulator invocation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Fabrice Bellard and the \s-1QEMU\s0 Project developers
